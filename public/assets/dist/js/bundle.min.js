// left sidebar menu
'use strict';

$(document).on('click', '.side-menu-label', function () {
    if ($('#theme-page-control').hasClass('collapsed-left-sidebar')) {
        if ($(this).hasClass('menu-active')) return;else {
            $('.side-menu-label').removeClass("menu-active");
            $(this).addClass('menu-active');
            $('.side-menu-label-body').slideUp();
            $(this).next('.side-menu-label-body').slideDown();
            return;
        }
    }
    if ($(this).hasClass('menu-active')) {
        $(this).removeClass("menu-active");
        $(this).next('.side-menu-label-body').slideUp();
    } else {
        $('.side-menu-label').removeClass("menu-active");
        $(this).addClass('menu-active');
        $('.side-menu-label-body').slideUp();
        $(this).next('.side-menu-label-body').slideDown();
    }
    $('.side-menu-label-1').removeClass("menu-active1");
});

function randomPassword(length) {
    var chars = "abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+<>ABCDEFGHIJKLMNOP1234567890";
    var pass = "";
    for (var x = 0; x < length; x++) {
        var i = Math.floor(Math.random() * chars.length);
        pass += chars.charAt(i);
    }
    return pass;
}

'use strict';

var _env = {};
_env.prefix = "intranet";

if (window.location.hostname === 'localhost') {
	_env.api_url = 'http://localhost:5000/api/';
	_env.base_url = 'http://localhost:5000/';
} else {
	_env.api_url = 'http://18.219.200.29:5000/api/';
	_env.base_url = 'http://18.219.200.29:5000/';
}

window._env = _env;
'use strict';

var _API_PATH = {};

_API_PATH.login = window._env.api_url + 'login';
_API_PATH.changePassword = window._env.api_url + 'change-password';
_API_PATH.updateProfileImage = window._env.api_url + 'update-profile-image';
_API_PATH.getProfile = window._env.api_url + 'get-profile';
_API_PATH.updateProfile = window._env.api_url + 'update-profile';
_API_PATH.resetPassword = window._env.api_url + 'reset-password';

//user permission (add and remove user )
_API_PATH.addEmployee = window._env.api_url + 'add-employee';

_API_PATH.listEmployee = window._env.api_url + 'list-employee';
//[GET] [_id:<Login user id>]
_API_PATH.getEmployee = window._env.api_url + 'get-employee';
//[GET] [userId:<user_id> ]

_API_PATH.updateAllEmployees = window._env.api_url + 'update-all-employees';
//[PUT] {status: "true", users: [id1, id2]}

_API_PATH.updateEmployee = window._env.api_url + 'update-employee';
//[PUT] request as add employee

_API_PATH.addCustomer = window._env.api_url + 'add-customer';
//[post] request as add customer


_API_PATH.updateCustomer = window._env.api_url + 'update-customer';
//[PUT] request as add customer


_API_PATH.listCustomer = window._env.api_url + 'list-customer';
//[GET] listCustomer all customer 

_API_PATH.getCustomer = window._env.api_url + 'get-customer';
//[GET] get single customer


_API_PATH.updateAllCustomers = window._env.api_url + 'update-all-customers';

/**
 * Settings
 */

_API_PATH.updateSettings = window._env.api_url + 'update-settings';
_API_PATH.getSettings = window._env.api_url + 'get-settings';

_API_PATH.getDirs = window._env.api_url + 'get-dirs';
/**
 * getDirs
 * type GET 
 * params [q, folderId ]
 * @type {[type]}
 */

_API_PATH.addDir = window._env.api_url + 'add-dir';
/**
 * addDir
 * Type [POST] 
 * data [parent (optional), title ]
 */

_API_PATH.removeDir = window._env.api_url + 'remove-dir';
/**
 * removeDir
 * [type : PUT]
 * @type {[folderId]}
 */

_API_PATH.removeDir = window._env.api_url + 'remove-dir';
/**removeDir
 * [type : PUT]
 * @type {[folderId]}
 */

_API_PATH.updateDir = window._env.api_url + 'update-dir';
/**removeDir
 * [type : PUT]
 * data[ folderId, folder : {title : test} ]
 */

_API_PATH.updateAllDir = window._env.api_url + 'update-all-dir';
/**updateAllDir
 * [type : PUT]
 * dirs (array of ids), action (trash,status), actionValue: true or false
 */

_API_PATH.shareDir = window._env.api_url + 'share-dir';
/**shareDir
 * [type : PUT]
 * folderId, access (array of user ids)
 */

_API_PATH.upload_file = window._env.api_url + 'upload-file';
/**
 * title, file as multipart, parent (folderId, ignore if uploaing into root dir)
 * [type : POST]
 */

_API_PATH.remove_dir = window._env.api_url + 'remove-dir';
/**
 * { path: a/b} 
 * [type : PUT]
 */

_API_PATH.share_resources = window._env.api_url + 'share-resources';
/**
 * { path: a/b} 
params : { path: a/b/c, access: [_id1, _id2, _id3]}
 */

_API_PATH.get_users_of_dir = window._env.api_url + 'get-users-of-dir';
/**
	params : { _id , folderId }
*/

_API_PATH.remove_access = window._env.api_url + 'remove-access';
/**PUT 
	params : { _id, folderId, userId }
*/

_API_PATH.list_leads = window._env.api_url + 'leads';
_API_PATH.addLead = window._env.api_url + 'leads/add';
_API_PATH.editLead = window._env.api_url + 'leads/edit';
_API_PATH.getLead = window._env.api_url + 'leads/single';

_API_PATH.generateQuote = window._env.api_url + 'generate/quote';
/**
 * { path: a/b} 
 * [type : PUT]
 */
_API_PATH.products = 'https://lightingoftomorrow.com/products.php';
/**
 * { path: a/b} 
 * [type : PUT]
 */

window._API_PATH = _API_PATH;
'use strict';
// initialize app

angular.module('intranet', ['ngMaterial', 'ngAnimate', 'ngAria', 'ngMessages', 'ui.router', 'ui.router.stateHelper', 'md.data.table', 'ngImgCrop', 'LocalStorageModule', 'ngFileUpload', 'googlechart', 'ngSanitize', 'ui.bootstrap']).config(['localStorageServiceProvider', '$qProvider', function (localStorageServiceProvider, $qProvider) {
    localStorageServiceProvider.setPrefix(window._env.prefix);

    // $qProvider.errorOnUnhandledRejections(false);
}])

//http headers and httpProvider , cookies 
.config(['$httpProvider', function ($httpProvider) {
    var interceptor = ['$q', '$rootScope', function ($q, $rootScope) {
        return {
            request: function request(config) {
                var googleURL = config.url;

                if ($rootScope.isLogin && config.data) {
                    config.data._id = $rootScope.isLogin._id;
                }

                if (googleURL.indexOf('maps.googleapis.com') > -1) {
                    return config;
                }

                var token = $rootScope.getToken();
                config.headers = config.headers || {};
                if (token) {
                    config.headers.Authorization = 'Bearer ' + token;
                }

                return config || $q.when(config);
            },
            requestError: function requestError(rejection) {
                return $q.reject(rejection);
            },
            response: function response(_response) {
                return _response || $q.when(_response);
            },

            //Revoke client authentication if 400 is received
            responseError: function responseError(rejection) {

                if (rejection.status === 417) {
                    $rootScope.logOut();
                }

                return $q.reject(rejection);
            }
        };
    }];

    $httpProvider.interceptors.push(interceptor);
}]);
'use strict';

angular.module('intranet').run(['$rootScope', function ($rootScope) {
    /* initialize valiable */
    $rootScope.themeColor = 'indigo';
    //left sidebar ripple color
    $rootScope.leftSidebarMenuRipple = "#000";
    //toolbar ripple color
    $rootScope.toolbarMenuRipple = "#312e2e";
    // theme default option value
    $rootScope.themeOptions = "fixed-sidebar fixed-toolbar";
    // tooltip for collapsed sidebar
    $rootScope.collapsedTooltipText = "Collapsed";
    $rootScope.showTooltipForCollapsed = "hide-collapsed-ls-tooltip";
}]).run(['$rootScope', 'services', '$state', '$log', function ($rootScope, services, $state, $log) {
    $rootScope.base_url = window._env.base_url;
    $rootScope.template = {
        noPictureTemplate: '/assets/images/no-picture.png'
    };

    if (services.getSession()) {
        var session = services.getSession();
        $rootScope.isLogin = session.user;

        $rootScope.isCookies = session ? session.session ? session.session : false : false;
    }

    $rootScope.logOut = function () {
        $rootScope.isLogin = services.removeSession();
        $state.go('login');
    };

    $rootScope.getToken = function () {

        if (Object.keys(services.getSession()).length > 0) {
            var token = services.getSession().session ? services.getSession().session.token : services.getSession().user.token;
            if (token) {
                return token;
            } else {
                return false;
            }
        }
    };

    window._log = function (message) {
        $log.debug(message);
    };

    $rootScope.updateUserSession = function () {
        if ($rootScope.isLogin) services.setSession($rootScope.isLogin);
        if ($rootScope.isCookies) services.setSession($rootScope.isCookies);
    };

    $rootScope.isEmpty = function (obj) {
        if (angular.equals({}, obj) === true) {
            return false;
        } else {
            return true;
        }
    };
}]);
'use strict';

angular.module('intranet').config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {

    $stateProvider.state({
        name: 'dashbaord',
        url: '/',
        templateUrl: 'components/app-dashboard/views/dashboard.html',
        controller: 'dashbaordController',
        auth: { login: true }
    }).state({
        name: 'error',
        templateUrl: 'components/error/no-access.html'
    });

    $locationProvider.html5Mode({
        enabled: true,
        requireBase: false
    });

    $urlRouterProvider.when('', '/');
    $urlRouterProvider.otherwise(function ($injector, $location) {
        var state = $injector.get('$state');
        state.go('error');
        return $location.path();
    });
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('userImage', ['$timeout', '$rootScope', function ($timeout, $rootScope) {
	return {
		scope: { type: '=' },
		template: '<img ng-src="{{image}}">',
		link: function link(scope, ele) {
			scope.image = $rootScope.isLogin && $rootScope.isLogin.image ? $rootScope.isLogin.image : $rootScope.template.noPictureTemplate;
		}
	};
}]).directive('scrollToTop', ['$timeout', function ($timeout) {
	return {
		template: '\n\t\t\t\t<md-button \n\t\t\t\t\tscroll-Top  \n\t\t\t\t\tng-click="scrollToTop()" \n\t\t\t\t\tclass="md-fab md-mini fadeInUp scrollToTop" \n\t\t\t\t\taria-label="scrollTop">\n\t\t\t\t\t<md-icon >close</md-icon>\n\t\t\t\t</md-button>',
		link: function link(scope, ele) {

			scope.icons = '';

			$(window).scroll(function () {

				if ($(window).scrollTop() > 200) {
					$('.scrollToTop').fadeIn();
				} else {
					$('.scrollToTop').fadeOut();
				}
			});

			scope.scrollToTop = function () {

				$('html,body').animate({
					scrollTop: 0
				}, 650);
			};
		}
	};
}])
//alert template 
/*
	alert={
		message:[your message] , 
		type:'error | suucess'
	}
 */
.directive('alertMessage', ['$timeout', function ($timeout) {
	return {
		restrict: 'E',
		template: '<div class="alert" \n\t\t\tng-class="{\'alert-error\':alert.type==\'error\',\'alert-success\':alert.type==\'success\'}"\n\t\t\tlayout="row" layout-align="space-between center">\n\t\t\t\t<div class="msg" ng-bind-html="alert.message"></div>\n\t\t\t<md-button class="md-icon-button" ng-click="close()" aria-label="close">\n\t\t\t<md-icon>close</md-icon>\n\t\t\t</md-button>\n\t\t\t</div>',
		link: function link(scope, ele) {
			scope.close = function () {
				delete scope.$parent.$parent.alert;
				delete scope.$parent.alert;
			};
		}
	};
}])

//confirm password 
.directive('passwordVerify', function () {

	return {
		require: 'ngModel',
		scope: {
			passwordVerify: '=',
			ngModel: '='
		},
		link: function link(scope, element, attrs, ctrl) {

			scope.$watch('ngModel', function (val) {
				if (val) {
					check();
				}
			});

			scope.$watch('passwordVerify', function (val) {
				if (val) {
					check();
				}
			});

			var check = function check() {
				if (scope.passwordVerify === scope.ngModel) {
					ctrl.$setValidity('passwordVerify', true);
				} else {

					ctrl.$setValidity('passwordVerify', false);
				}
			};
		}
	};
})
//progress button
//<md-loader ng-if="loading" loading="loading"> Loading..</md-loader>
.directive('mdLoader', [function () {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			loading: '='
		},
		template: '<div ng-if="loading" layout="row"  layout-align="center center">\n                        <md-progress-circular  md-diameter="20px" md-mode="indeterminate"></md-progress-circular>\n                        &nbsp;<small ng-transclude></small>\n\t               </div>'
	};
}])
//move to next element
.directive('moveNextOnMaxlength', [function () {
	return {
		link: function link(scope, ele) {

			ele.on("input", function (e) {

				if (ele.val().length == ele.attr("maxlength")) {
					var $nextElement = ele.next();

					if ($nextElement.length) {
						$nextElement[0].focus();
					}
				}
			});

			ele.on('keyup', function (e) {
				if (e.keyCode == 8) {
					var $prevElement = ele.prev();
					if ($prevElement.length) {
						$prevElement[0].focus();
					}
				}
			});
		}
	};
}]).directive('fallbackSrc', function () {
	return {
		link: function postLink(scope, iElement, iAttrs) {

			iElement.bind('error', function () {
				angular.element(this).attr("src", iAttrs.fallbackSrc);
			});
		}
	};
});
'use strict';
/*
Singletons Ã¢â‚¬â€œ Each component dependent on a service gets a reference to the 
single instance generated by the service factory
	factory services
 */

angular.module('intranet').factory('services', ['$http', '$rootScope', 'localStorageService', '$log', '$q', '$compile', '$mdToast', function ($http, $rootScope, localStorageService, log, $q, $compile, $mdToast) {
	var _this = this;

	var services = {};

	services.saveLocal = function (key, data) {
		if (!data) {
			return false;
		}
		localStorageService.set(key, data, "sessionStorage");
		return localStorageService.get(key, "sessionStorage");
	};

	services.deleteSavedLocal = function (key) {
		if (!key) {
			return false;
		}
		return localStorageService.remove(key, "sessionStorage");
	};

	services.getSaveLocal = function (key) {
		if (!key) {
			return false;
		}

		var data = localStorageService.get(key, "sessionStorage");
		if (data) {
			return localStorageService.get(key, "sessionStorage");
		} else {
			return false;
		}
	};
	services.getError = function (data) {

		if (data) {
			var obj = {};
			obj.type = data.type;

			obj.message = data.errors ? data.errors[0] : data.message;

			return obj;
		} else {
			return false;
		}
	};

	services.notify = function (message, type, obj) {
		if (!message) {
			return;
		}
		$mdToast.show({
			hideDelay: 9000,
			position: 'top right',
			controller: 'notifyCtrl',
			template: '\n\t\t\t\t<md-toast class="alert-toster">\n\t\t\t\t\t<div layout="row" layout-align="space-between center" class="md-block">\n\t\t\t\t\t  <span class="md-toast-text" flex>{{message.message}}</span>\n\t\t\t\t\t  <md-button ng-if="message.data" class="md-icon-button white-icon" ng-click="redirect()" aria-label="redirect">\n\t\t\t\t\t    \t<md-icon >info_outline</md-icon>\n\t\t\t\t\t    \t<md-tooltip>Open/View</md-tooltip>\n\t\t\t\t\t  </md-button>\n\t\t\t\t\t  <md-button class="md-icon-button button-close" ng-click="close()" aria-label="close">\n\t\t\t\t\t    \t<md-icon >close</md-icon>\n\t\t\t\t\t  </md-button>\n\t\t\t\t  </div>\n\t\t\t\t</md-toast>',
			toastClass: type,
			locals: { message: { message: message, data: obj } }
		});
	};

	//set session object
	/**
  * [set object data on local cookies]
  * @param {object} obj JSON.object
  */
	_this.keys = '-user';

	services.setCookies = function (obj) {
		if (!obj) {
			log.warn('Provide session object to set for local cookies');
		}

		var user = { name: obj.name, token: obj.token, email: obj.email, image: obj.image };
		localStorageService.cookie.set(_this.keys, user);
		return localStorageService.cookie.get(_this.keys);
	};

	services.removeCookies = function () {
		localStorageService.cookie.remove(_this.keys);
		return false;
	};

	services.setSession = function (obj) {

		if (!obj) {
			log.warn('Provide session object to set for local cookies');
		}

		if (obj.remember) {
			services.setCookies(obj);
		} else {
			services.removeCookies();
		}
		localStorageService.set(_this.keys, obj, "sessionStorage");
		return services.getSession();
	};

	//get session object if exist
	/**
  * [getSession get Session data form local]
  * @return {object} [return json.object user object]
  */

	services.getSession = function () {
		var session = localStorageService.cookie.get(_this.keys);
		var user = {};
		if (session) {
			user.session = session;
		}
		if (localStorageService.get(_this.keys, "sessionStorage")) {
			user.user = localStorageService.get(_this.keys, "sessionStorage");
		}
		if (user) {
			return user;
		} else {
			return {};
		}
	};

	/**
  * [clear all seesion data]
  * @return true or false
  */
	services.removeSession = function () {
		// _this.keys = '-user';
		// localStorageService.cookie.remove(_this.keys);
		localStorageService.remove(_this.keys, "sessionStorage");
		localStorageService.clearAll();
		return false;
	};

	/**
  * [$http request method]
  * @param  {object} obj [http request object {method:'POST',url:'url'}]
  * @return {promise}     [return response object]
  */
	services.http = function (obj) {

		return $q(function (resolve, reject) {
			return $http(obj).then(function (response) {

				if (response.data.type === 'success') {
					return resolve(response.data);
				}
				if (response.data.type === 'error') {
					return reject(response.data);
				}
			}, function (error) {

				if (error.status === -1) {
					services.notify('Disconnected from server, Server is probably not available', 'error');
				}
				return reject(error.data);
			});
		});
	};

	/**
  * [description]
  * @param  {html template} html  [description]
  * @param  {scope variable} scope [description]
  * @return {string  compile with scope}       [description]
  */
	services.HTMLcompile = function (html, scope) {
		var compiled = $compile(html)(scope);
		return compiled[0];
	};

	/**
  * [get address form google API based on query]
  * @param  {[type]} query [description]
  * @return {[type]}       [description]
  */
	services.getAddress = function (query) {

		if (!query) {
			return;
		}

		return $http.get('//maps.googleapis.com/maps/api/geocode/json', {
			params: {
				address: query
			},
			cache: true
		}).then(function (response) {
			if (!response) {
				return;
			}

			return response.data.results.map(function (item) {

				var address_compoments = void 0;

				item.address = services.formatted_address(item.address_components, item.formatted_address);

				var location = item.geometry;
				delete item.geometry;
				delete item.address_components;
				delete item.types;
				delete item.place_id;
				item.geometry = location.location;
				item.location = {
					coordinates: [location.location.lng, location.location.lat],
					type: "Point"
				};
				return item;
			});
		});
	};

	services.formatted_address = function (obj, formatted_address) {

		if (!angular.isArray(obj)) {
			return obj + ' is not an array';
		}
		var tmp = {};

		obj.map(function (x) {

			if (x.types.indexOf('locality') > -1) {
				tmp.city = x.long_name;
			}
			if (x.types.indexOf('administrative_area_level_1') > -1 || x.types.indexOf('administrative_area_level_2') > -1) {
				tmp.state = x.long_name;
			}
			if (x.types.indexOf('country') > -1) {
				tmp.country = x.long_name;
			}
			if (x.types.indexOf('postal_code') > -1) {
				tmp.postal_code = x.long_name;
			}
			if (x.types.indexOf('sublocality_level_1') > -1) {
				tmp.locality = x.long_name;
			}
			if (x.types.indexOf('sublocality_level_1') > -1 || x.types.indexOf('sublocality') > -1) {
				tmp.sublocality = x.long_name;
			}
			if (x.types.indexOf('street_number') > -1) {
				tmp.sublocality = formatted_address.split(',')[0];
			}
		});
		return tmp;
	};

	return services;
}]);
'use strict';

angular.module('intranet').run(['$rootScope', '$state', '$timeout', '$location', function ($rootScope, $state, $timeout, $location) {
    $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        $rootScope.isLoginRoute = toState.name === 'login' || toState.name === 'resetPassword' ? true : false;
    });
    $rootScope.$on("$stateChangeSuccess", function (event, toState, toParams, fromState, fromParams) {
        $rootScope.isLoginRoute = toState.name === 'login' || toState.name === 'resetPassword' ? true : false;

        $rootScope.state = toState.name;

        if ($rootScope.isLogin) {
            if (Object.keys($rootScope.isLogin).length == 0) {
                if (toState.auth) {
                    if (toState.auth.login === true) {
                        console.log("login1");
                        $location.path('/login');
                    }
                }
            } else {
                if (toState.name === 'login') {
                    console.log("login2");
                    $state.go('dashbaord');
                }
            }
        } else {
            console.log("login3");
            $location.path('/login');
        }
    });
}]);
'use strict';

angular.module('intranet').controller('dashbaordController', ['$scope', '$rootScope', function ($scope, $rootScope) {

    $scope.dashboardChart1 = {
        "type": "ColumnChart",
        "data": [['Month', 'PageView', 'Average'], ['Jan', 998, 614.6], ['Feb', 1268, 682], ['Mar', 807, 623], ['Apr', 968, 609.4], ['May', 1026, 569.6]],
        "options": {
            title: 'Monthly PageView',
            vAxis: { title: 'PageView' },
            hAxis: { title: 'Month' },
            seriesType: 'bars',
            series: { 1: { type: 'line' } },
            legend: { position: 'bottom' }
        }
    };

    //  Monthly users charts
    $scope.dashboardChart2 = {
        "type": "ColumnChart",
        "data": [['Month', 'PageView', 'Average'], ['Jan', 938, 614.6], ['Feb', 1120, 682], ['Mar', 1167, 623], ['Apr', 615, 609.4], ['May', 629, 569.6]],
        "options": {
            title: 'Monthly Users',
            vAxis: { title: 'Users' },
            hAxis: { title: 'Month' },
            legend: { position: 'bottom' },
            isStacked: true
        }
    };

    //  Monthly bounce rate
    $scope.dashboardChart3 = {
        "type": "PieChart",
        "data": [['Month', 'Bounce Rate'], ['Jan', 614.6], ['Feb', 682], ['Mar', 623], ['Apr', 609.4], ['May', 569.6]],
        "options": {
            title: 'Monthly Bounce Rate',
            is3D: true
        }
    };

    //  Sessions by county
    $scope.dashboardChart4 = {
        "type": "GeoChart",
        "data": [['Country', 'Sessions'], ['Germany', 200], ['United States', 300], ['Brazil', 400], ['Canada', 500], ['France', 600], ['RU', 700]],
        "options": {}
    };
}]);
'use strict';

/*
Singletons serivice Each component dependent on a service gets a reference to the 
single instance generated by the service factory
	factory services
 */

angular.module('intranet').factory('loginValidate', ['services', "$location", '$q', function (services, $location, $q) {
	return {
		checkStatus: function checkStatus() {
			return $q(function (resolve, reject) {
				if (services.getSession()) {

					var session = services.getSession().user;
					if (session) {
						console.log("login");
						$location.path('/');
					} else {
						console.log("not login");
						$location.path('/login');
					}
				}
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('myProfileController', ['$scope', '$rootScope', '$state', function ($scope, $rootScope, $state) {

	$scope.goto = function (state) {
		return $state.go(state);
	};
	$scope.currentNavItem = $state.current.name;

	if ($state.current.name === 'myProfile') {
		$state.go('myProfile.personalInfo');
	}
}]);
'use strict';

angular.module('intranet').controller('addCustomerController', ['$scope', '$rootScope', '$state', 'services', '$timeout', function ($scope, $rootScope, $state, services, $timeout) {
	$scope.user = {};

	var request = {
		url: window._API_PATH.addEmployee,
		method: 'POST',
		data: { _id: $rootScope.isLogin._id }
	};

	// $scope.state =$state.current.name;
	// // $scope.user={ permissions :[] };

	// $scope.isEdit =false;
	// //get user list 

	// if($state.current.name==='updateUser') {
	// 	$scope.isPageLoading =true;
	// 	//update request params
	// 	request.url = window._API_PATH.updateEmployee //update URL
	// 	request.method ="PUT";
	// 	request.data.userId = $state.params.id;

	// 	if(!$state.params.id){ return; }
	// 	$scope.isEdit =true;

	// 	services.http({
	// 			method:'GET',
	// 			url: window._API_PATH.getEmployee,
	// 			params:{userId: $state.params.id,_id:$rootScope.isLogin._id}
	// 		}).then( res => {
	// 			$scope.user= res.data ;
	// 			$timeout(() => { $scope.isPageLoading =false;}, 300);


	// 		}).catch(err => {
	// 			$timeout(() => { $scope.isPageLoading =false;}, 300);
	// 			history.go(-1);
	// 			services.notify(services.getError(err).message , 'error');
	// 		});
	// }


	$scope.submitForm = function (form, user) {
		if (form.$valid) {

			$scope.isLoading = true;

			services.http({
				url: window._API_PATH.addCustomer,
				method: 'POST',
				data: { _id: $rootScope.isLogin._id, userData: user }
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.user = {};
				form.$setPristine();
				form.$setUntouched();

				$scope.alert = { type: 'success', message: res.message };
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('customerCRMController', ['$scope', '$rootScope', '$state', 'services', '$q', function ($scope, $rootScope, $state, services, $q) {

	$scope.actionType = 'select';
	$scope.paging = {};
	$scope.isFilter = false;
	$scope.selected = [];
	$scope.getList = function () {
		$scope.promise = $q(function (resolve, reject) {

			var params = $scope.paging ? $scope.paging : {};
			params._id = $rootScope.isLogin._id;
			return services.http({
				method: 'GET',
				url: window._API_PATH.listCustomer,
				params: params
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.users = res;
				$scope.paging = res.paging;
				resolve(res);
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
				services.notify(services.getError(err).message, 'error');
				reject(err);
			});
		});
	};

	$scope.getList();

	$scope.refresh = function () {
		$state.reload();
	};

	$scope.filterResult = function (search) {
		$scope.paging.q = search;
		$scope.getList();
	};

	$scope.closeFilter = function () {
		$scope.isFilter = !$scope.isFilter;
		if ($scope.isFilter == false) {
			$scope.getList();
		}
	};

	$scope.changeStatus = function () {

		if ($scope.actionType == "select") {
			services.notify('Please select action type', 'error');
		} else {
			var status = $scope.actionType == 'activate' ? true : false;
			$scope.isProcessing = true;
			services.http({
				method: 'PUT',
				url: window._API_PATH.updateAllEmployees,
				data: { users: $scope.selected, status: status }
			}).then(function (res) {
				services.notify(res.message);
				$scope.getList();
				$scope.isProcessing = false;
				$state.reload();
			}).catch(function (err) {
				//define error
				$scope.alert = services.getError(err);
				services.notify(services.getError(err).message, 'error');
				$scope.isProcessing = false;
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('updateCustomerController', ['$scope', '$rootScope', '$state', 'services', '$timeout', function ($scope, $rootScope, $state, services, $timeout) {
	$scope.user = {};
	if (!$state.params.id) {
		window.history.go(-1);
	}
	$scope.isPageLoading = true;
	$scope.isEdit = true;

	var request = {
		url: window._API_PATH.addEmployee,
		method: 'POST',
		data: { _id: $rootScope.isLogin._id }
	};
	services.http({
		method: 'GET',
		url: window._API_PATH.getCustomer,
		params: { userId: $state.params.id, _id: $rootScope.isLogin._id }
	}).then(function (res) {
		$scope.user = res.data;
		$timeout(function () {
			$scope.isPageLoading = false;
		}, 300);
	}).catch(function (err) {
		$timeout(function () {
			$scope.isPageLoading = false;
		}, 300);
		history.go(-1);
		services.notify(services.getError(err).message, 'error');
	});

	$scope.submitForm = function (form, user) {
		if (form.$valid) {

			$scope.isLoading = true;

			services.http({
				url: window._API_PATH.updateCustomer,
				method: 'PUT',
				data: { _id: $rootScope.isLogin._id, userData: user }
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.alert = { type: 'success', message: res.message };
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('addNewFolderController', ['$scope', '$mdDialog', 'services', '$rootScope', 'data', '$state', function ($scope, $mdDialog, services, $rootScope, data, $state) {
	$scope.cancel = function () {
		$mdDialog.cancel();
	};
	$scope.hideFolder = true;
	$scope.data = data;

	if ($state.params && $state.params._id) {
		$scope.hideFolder = false;
	}
	$scope.submitForm = function (form, data) {

		if (form.$valid) {
			$scope.isLoading = true;
			var request = {};data._id = $rootScope.isLogin._id;
			angular.copy(data, request);

			if (data.parent && data.parent._id) {
				request.parent = data.parent._id;
			}

			if ($state.params && $state.params._id) {
				request.parent = $state.params._id;
			}

			if ($scope.data && $scope.data.path) {
				request.path = $scope.data.path.path;
				request.breadcrumb = $scope.data.path.breadcrumb;
				// request.breadcrumb.push({_id:$scope.data.path._id, title:$scope.data.path.title});
			}
			services.http({ url: window._API_PATH.addDir, method: 'POST', data: request }).then(function (res) {
				$scope.isLoading = false;
				$mdDialog.cancel(res);
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('documentUploadController', ['$scope', '$rootScope', '$state', 'services', '$timeout', function ($scope, $rootScope, $state, services, $timeout) {

	$scope.folderActive = services.getSaveLocal('activeFolder') || {};
	$scope.folders = [];
	$scope.filter = 1;
	$scope.searchText = null;
	$scope.params = { limit: 150, _id: $rootScope.isLogin._id };

	$scope.getFolderList = function (off) {
		if (!off) {
			$scope.isLoading = true;
		}

		services.http({ url: window._API_PATH.getDirs, method: 'GET',
			params: $scope.params }).then(function (res) {
			$scope.isLoading = false;
			$scope.isSearching = false;
			$scope.folders = res.data;
			$scope.folderPath = res.parentDir;

			if (!off && $scope.folders.length > 0) {
				$scope.folderActive = $scope.folders[0];
				services.saveLocal('activeFolder', $scope.folderActive);
			}

			if ($scope.folders.length == 0) {
				services.deleteSavedLocal('activeFolder');
			}
		}).catch(function (err) {

			//define error
			$scope.isLoading = false;
			$scope.isSearching = false;
			services.deleteSavedLocal('activeFolder');
			$scope.alert = services.getError(err);
		}).then(function () {});
	};
	$scope.getFolderList();

	$scope.$on('updateList', function (event, data) {

		if ($state.params && !$state.params._id) {
			$scope.getFolderList('off');
		}
	});
	$scope.getShareFolder = function (folder) {
		$scope.isShareLoading = true;
		services.http({
			method: 'GET',
			url: window._API_PATH.get_users_of_dir,
			params: { _id: $rootScope.isLogin._id, folderId: folder._id }
		}).then(function (res) {
			$scope.users = res.data;$scope.isShareLoading = true;
		});
	};

	$scope.folderSelected = function (folder) {
		$scope.folderActive = folder;
		$scope.getShareFolder(folder);
		services.saveLocal('activeFolder', folder);
	};

	$scope.openFolder = function (folder) {
		if (!folder.attachment) {
			$scope.params.q = null;
			$state.go('folderList', { _id: folder._id });
		}
	};

	$scope.clear = function () {
		$scope.searchText = null;
		delete $scope.params.q;
		$scope.getFolderList('off');
	};

	$scope.filterList = function (searchText) {
		$timeout(function () {
			if (searchText) {
				$scope.isSearching = true;
				$scope.params.q = searchText;
				$scope.getFolderList('off');
			} else {
				$scope.params.q = null;
				$scope.isSearching = true;
				$scope.getFolderList('off');
			}
		}, 500);
	};

	$scope.filterResult = function (filter) {

		if (filter == 1 || filter == 2) {
			console.log("filter");
			delete $scope.params.resourceType;
			$scope.getFolderList('off');
		} else {
			$scope.params.resourceType = filter;
			$scope.getFolderList('off');
		}
	};
}]);
'use strict';

angular.module('intranet').controller('fileUploadDiaglogController', ['$scope', '$mdDialog', 'services', '$rootScope', 'Upload', '$timeout', '$state', function ($scope, $mdDialog, services, $rootScope, Upload, $timeout, $state) {

  var params = {
    _id: $rootScope.isLogin._id
  };

  if ($state.params && $state.params._id) {
    params.folderId = $state.params._id;
  }

  $scope.cancel = function () {
    $mdDialog.cancel();
  };
  $scope.path = null;
  $scope.$watch('folderPath', function (folderPath) {
    if (folderPath) {
      $scope.path = folderPath.path;
    }
  });

  var uploadFileToServer = function uploadFileToServer(file, key) {

    if (!file) {
      return;
    }
    $scope.files[key].isLoading = 1;
    params.file = file;

    if ($scope.path) {
      params.path = $scope.path;
    }

    Upload.upload({
      url: window._API_PATH.upload_file,
      data: params
    }).then(function (resp) {

      $scope.files[key].isUploaded = true;
      $scope.files[key].isLoading = false;
    }, function (resp) {

      $scope.files[key].isLoading = false;
    }, function (evt) {

      var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);

      $timeout(function () {
        $scope.files[key].isLoading = progressPercentage;
      }, 200);
    });
  };

  $scope.uploadAll = function () {

    if ($scope.files) {
      angular.forEach($scope.files, function (value, key) {
        if (value.isUploaded == false) uploadFileToServer(value, key);
      });
    }
  };
}]);
'use strict';

angular.module('intranet').controller('folderListController', ['$location', '$scope', '$rootScope', '$state', 'services', '$timeout', function ($location, $scope, $rootScope, $state, services, $timeout) {
	var folderId = null;

	$scope.folderActive = services.getSaveLocal('activeFolder') || {};

	$scope.filter = 1;
	if (!$state.params && !$state.params._id) {
		$state.go("documentUpload");
	}

	$scope.params = {
		limit: 150,
		_id: $rootScope.isLogin._id,
		folderId: $state.params._id

	};

	//get folder data and list 

	$scope.getFolderList = function (off) {

		if (!off) {
			$scope.isLoading = true;
		}

		services.http({ url: window._API_PATH.getDirs, method: 'GET',
			params: $scope.params }).then(function (res) {
			$scope.isLoading = false;
			$scope.isSearching = false;
			$scope.folders = res.data;
			$scope.folderPath = res.parentDir;

			$scope.folderActive = $scope.folders[0];
			services.saveLocal('activeFolder', $scope.folderActive);

			if ($scope.folders.length == 0) {
				services.deleteSavedLocal('activeFolder');
			}
		}).catch(function (err) {
			//define error
			$scope.isLoading = false;
			$scope.isSearching = false;
			$state.go('error');
		});
	};

	$scope.getFolderList();

	$scope.$on('updateList', function (ev, data) {
		if ($state && $state.params._id) {
			$scope.getFolderList('off');
		}
	});

	$scope.users = [];

	$scope.getShareFolder = function (folder) {
		$scope.isShareLoading = true;
		services.http({
			method: 'GET',
			url: window._API_PATH.get_users_of_dir,
			params: { _id: $rootScope.isLogin._id, folderId: folder._id }
		}).then(function (res) {
			$scope.users = res.data;$scope.isShareLoading = true;
		});
	};

	$scope.folderSelected = function (folder) {
		$scope.folderActive = folder;
		$scope.getShareFolder(folder);
		services.saveLocal('activeFolder', folder);
	};

	$scope.openFolder = function (folder) {
		if (!folder.attachment) {
			$scope.params.q = null;
			$state.go('folderList', { _id: folder._id });
		}
	};

	$scope.filterList = function (searchText) {
		$timeout(function () {
			if (searchText) {
				$scope.isSearching = true;
				$scope.params.q = searchText;
				$scope.getFolderList('off');
			} else {
				$scope.params.q = null;
				$scope.isSearching = true;
				$scope.getFolderList('off');
			}
		}, 500);
	};

	$scope.clear = function () {
		$scope.searchText = null;
		delete $scope.params.q;
		$scope.getFolderList('off');
	};
}]);
'use strict';

angular.module('intranet').controller('renameFolderController', ['$scope', '$mdDialog', 'services', '$rootScope', 'data', function ($scope, $mdDialog, services, $rootScope, data) {
	$scope.cancel = function () {
		$mdDialog.cancel();
	};
	$scope.user = data.folderActive;

	$scope.submitForm = function (form, data) {

		if (form.$valid) {
			$scope.isLoading = true;
			var request = { folderId: data._id, folder: { title: data.title } };
			request._id = $rootScope.isLogin._id;

			services.http({ url: window._API_PATH.updateDir, method: 'PUT', data: request }).then(function (res) {
				$scope.isLoading = false;
				$mdDialog.cancel(res);
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('shareData', ['$timeout', '$rootScope', '$state', '$mdDialog', 'services', function ($timeout, $rootScope, $state, $mdDialog, services) {
	return {
		link: function link(scope, ele) {

			ele.on('click', function () {

				$mdDialog.show({
					controller: "shareDataController",
					templateUrl: 'components/document-upload/views/share-data.html',
					clickOutsideToClose: false,
					locals: { data: scope.folderActive }
				}).then(function (folder) {}, function (folder) {

					if (folder) {
						$timeout(function () {
							services.notify(folder.message);
						}, 300);
					}
				});
			});
		}
	};
}]).controller('shareDataController', ['$scope', '$mdDialog', 'services', '$rootScope', '$state', 'data', function ($scope, $mdDialog, services, $rootScope, $state, data) {
	$scope.folderActive = data;

	console.log($scope.folderActive);

	$scope.cancel = function () {
		$mdDialog.cancel();
	};

	$scope.getShareFolder = function () {

		services.http({
			method: 'GET',
			url: window._API_PATH.get_users_of_dir,
			params: { _id: $rootScope.isLogin._id, folderId: $scope.folderActive._id }
		}).then(function (res) {
			return $scope.users = res.data;
		});
	};
	$scope.getShareFolder();
	$scope.users = [];

	$scope.remove = function (user) {

		var index = null;
		$scope.users.map(function (res, key) {
			index = user._id == res._id ? key : false;
		});

		user.isLoading = true;
		services.http({
			method: 'PUT',
			url: window._API_PATH.remove_access,
			data: { _id: $rootScope.isLogin._id, folderId: $scope.folderActive._id, userId: user._id }
		}).then(function (res) {
			user.isLoading = false;
			$scope.users.splice(index, 1);
		});
	};

	$scope.searchText = null;
	$scope.selectedUsers = [];
	$scope.transformChip = transformChip;
	$scope.querySearchDeferred = querySearchDeferred;

	$scope.share = function (form) {
		console.log($scope.selectedUsers);

		if ($scope.selectedUsers.length > 0) {
			var users = [];
			users = $scope.selectedUsers.map(function (r) {
				return r._id;
			});

			// { path: a/b/c, access: [_id1, _id2, _id3]
			var params = {
				path: $scope.folderActive.path,
				_id: $rootScope.isLogin._id,
				access: users
			};

			services.http({
				method: 'PUT',
				url: window._API_PATH.share_resources,
				data: params
			}).then(function (res) {
				console.log(res);
				$mdDialog.cancel(res);
			}).catch(function (err) {
				$scope.alert = services.getError(err);
			});
		}
	};

	function transformChip(chip) {
		// If it is an object, it's already a known chip
		if (angular.isObject(chip)) {
			return chip;
		}
	}

	function querySearchDeferred(query) {
		var params = {};
		params.q = query ? query : '';
		params._id = $rootScope.isLogin._id;
		params.folderId = $scope.folderActive._id;
		params.type = 'non-shared';
		return services.http({
			method: 'GET',
			url: window._API_PATH.get_users_of_dir,
			params: params
		}).then(function (res) {
			return res.data;
		});
	}
}]);
'use strict';

angular.module('intranet').controller('addLeadsController', ['$scope', '$rootScope', '$state', 'services', '$timeout', "$location", function ($scope, $rootScope, $state, services, $timeout, $location) {
	$scope.user = {};

	var request = {
		url: window._API_PATH.addEmployee,
		method: 'POST',
		data: { _id: $rootScope.isLogin._id }
	};
	$scope.selectedProducts = [{}];

	if ($state.params.id) {
		services.http({
			url: window._API_PATH.getLead,
			method: 'GET',
			params: { _id: $rootScope.isLogin._id, leadId: $state.params.id }
		}).then(function (res) {
			$scope.isLoading = false;
			$scope.lead = res.data;
			$scope.isEdit = true;
		}).catch(function (err) {
			$scope.isLoading = false;
		});
	} else {

		$scope.lead = {
			notes: [],
			products: [{}]
		};
	}

	/* $scope.products = [
 	{ title: "Product A" },
 	{ title: "Product B" },
 	{ title: "Product C" },
 	{ title: "Product D" },
 	{ title: "Product E" }
 ]; */

	$scope.plusMinus = function () {
		var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'plus';
		var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		if (action === 'plus') {
			/*add one empty product to add*/
			$scope.lead.products.push({});
		} else {
			/*remove one product*/
			$scope.lead.products.splice(index, 1);
		}
	};

	$scope.getProducts = function () {
		services.http({
			url: "https://lightingoftomorrow.com/products.php",
			method: 'GET'
		}).then(function (r) {
			return console.log("e........");
		}).catch(function (e) {
			return console.log(e);
		});
	};

	$scope.getProducts();

	$scope.submitForm = function (form, lead) {
		if (form.$valid) {

			$scope.isLoading = true;

			var _request = { _id: $rootScope.isLogin._id, data: lead };
			if ($state.params.id) _request.leadId = $state.params.id;
			services.http({
				url: $state.params.id ? window._API_PATH.editLead : window._API_PATH.addLead,
				method: $state.params.id ? 'PUT' : 'POST',
				data: _request
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.user = {};
				form.$setPristine();
				form.$setUntouched();

				$scope.alert = { type: 'success', message: res.message };
				$location.path("/leads");
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('leadsController', ['$scope', '$rootScope', '$state', 'services', '$q', function ($scope, $rootScope, $state, services, $q) {

	$scope.actionType = 'select';
	$scope.paging = {};
	$scope.isFilter = false;
	$scope.selected = [];
	$scope.getList = function () {
		$scope.promise = $q(function (resolve, reject) {
			var params = $scope.paging ? $scope.paging : {};
			params._id = $rootScope.isLogin._id;
			return services.http({
				method: 'GET',
				url: window._API_PATH.list_leads,
				params: params
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.users = res;
				$scope.paging = res.paging;
				resolve(res);
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
				services.notify(services.getError(err).message, 'error');
				reject(err);
			});
		});
	};

	$scope.getList();

	$scope.refresh = function () {
		$state.reload();
	};

	$scope.filterResult = function (search) {
		$scope.paging.q = search;
		$scope.getList();
	};

	$scope.closeFilter = function () {
		$scope.isFilter = !$scope.isFilter;
		if ($scope.isFilter == false) {
			$scope.getList();
		}
	};

	$scope.changeStatus = function () {

		if ($scope.actionType == "select") {
			services.notify('Please select action type', 'error');
		} else {
			var status = $scope.actionType == 'activate' ? true : false;
			$scope.isProcessing = true;
			services.http({
				method: 'PUT',
				url: window._API_PATH.updateAllEmployees,
				data: { users: $scope.selected, status: status }
			}).then(function (res) {
				services.notify(res.message);
				$scope.getList();
				$scope.isProcessing = false;
				$state.reload();
			}).catch(function (err) {
				//define error
				$scope.alert = services.getError(err);
				services.notify(services.getError(err).message, 'error');
				$scope.isProcessing = false;
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('updateCustomerController', ['$scope', '$rootScope', '$state', 'services', '$timeout', function ($scope, $rootScope, $state, services, $timeout) {
	$scope.user = {};
	if (!$state.params.id) {
		window.history.go(-1);
	}
	$scope.isPageLoading = true;
	$scope.isEdit = true;

	var request = {
		url: window._API_PATH.addEmployee,
		method: 'POST',
		data: { _id: $rootScope.isLogin._id }
	};
	services.http({
		method: 'GET',
		url: window._API_PATH.getCustomer,
		params: { userId: $state.params.id, _id: $rootScope.isLogin._id }
	}).then(function (res) {
		$scope.user = res.data;
		$timeout(function () {
			$scope.isPageLoading = false;
		}, 300);
	}).catch(function (err) {
		$timeout(function () {
			$scope.isPageLoading = false;
		}, 300);
		history.go(-1);
		services.notify(services.getError(err).message, 'error');
	});

	$scope.submitForm = function (form, user) {
		if (form.$valid) {

			$scope.isLoading = true;

			services.http({
				url: window._API_PATH.updateCustomer,
				method: 'PUT',
				data: { _id: $rootScope.isLogin._id, userData: user }
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.alert = { type: 'success', message: res.message };
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller("proposalCreatorController", ['$scope', '$rootScope', '$location', 'services', '$mdDialog', '$log', '$q', '$http', 'filterFilter', '$timeout', function ($scope, $rootScope, $location, services, $mdDialog, $log, $q, $http, filterFilter, $timeout) {
    /** Code from here */
    $scope.selectedProducts = [];
    $scope.proposal = { products: [] };

    $scope.addNew = function () {
        $scope.selectedProducts.push({});
        // $scope.proposal.products.push({ title:"kdhgdskj"});
    };

    // list of `state` value/display objects
    $scope.isProductLoading = true;
    $http({ url: window._API_PATH.products, method: 'get' }).then(function (res) {
        $scope.states = res.data;$scope.isProductLoading = false;
    }).catch(function (err) {
        return console.log(err);
    });

    $scope.querySearch = function (query) {
        var results = query ? filterFilter($scope.states, query) : [],
            deferred;
        if ($scope.simulateQuery) {
            deferred = $q.defer();
            $timeout(function () {
                deferred.resolve(results);
            }, Math.random() * 1000, false);
            return deferred.promise;
        } else {
            return results;
        }
    };

    $scope.selectedItemChange = function (item) {
        if (item) {
            $scope.selectedProducts.push(item);
            $scope.proposal.products.push(item);
            $scope.searchText = '';
        }
    };

    $scope.remove = function (index) {
        $scope.selectedProducts.splice(index, 1);
        $scope.proposal.products.splice(index, 1);
    };

    $scope.calc = function (product, i) {
        if (product.qty && product.price) {
            $scope.proposal.products[i].extended_cost = (product.price * product.qty).toFixed(2);
        }
        return false;
    };

    $scope.selectedFile = function (file, index) {
        if (file) {
            if (!$scope.proposal.products[index]) {
                $scope.proposal.products[index] = {};
            }
            $scope.proposal.products[index].file = file;
        }
    };

    $scope.submitForm = function (form, data) {
        console.log(data);
    };
}]);
'use strict';

angular.module('intranet').controller("quoteCreatorController", ['$scope', '$rootScope', '$location', 'services', '$mdDialog', '$log', '$q', '$http', 'filterFilter', '$timeout', function ($scope, $rootScope, $location, services, $mdDialog, $log, $q, $http, filterFilter, $timeout) {
    /** Code from here */
    $scope.selectedProducts = [];
    $scope.quote = { products: [] };

    $scope.addNew = function () {
        $scope.selectedProducts.push({});
        // $scope.quote.products.push({ title:"kdhgdskj"});
    };

    // list of `state` value/display objects
    $scope.isProductLoading = true;
    $http({ url: window._API_PATH.products, method: 'get' }).then(function (res) {
        $scope.states = res.data;$scope.isProductLoading = false;
    }).catch(function (err) {
        return console.log(err);
    });

    $scope.querySearch = function (query) {
        var results = query ? filterFilter($scope.states, query) : [],
            deferred;
        if ($scope.simulateQuery) {
            deferred = $q.defer();
            $timeout(function () {
                deferred.resolve(results);
            }, Math.random() * 1000, false);
            return deferred.promise;
        } else {
            return results;
        }
    };

    $scope.selectedItemChange = function (item) {
        if (item) {
            $scope.selectedProducts.push(item);
            $scope.quote.products.push(item);
            $scope.searchText = '';
        }
    };

    $scope.remove = function (index) {
        $scope.selectedProducts.splice(index, 1);
        $scope.quote.products.splice(index, 1);
    };

    $scope.calc = function (product, i) {
        if (product.qty && product.price) {
            $scope.quote.products[i].extended_cost = (product.price * product.qty).toFixed(2);
        }
        return false;
    };

    $scope.selectedFile = function (file, index) {
        if (file) {
            if (!$scope.quote.products[index]) {
                $scope.quote.products[index] = {};
            }
            $scope.quote.products[index].file = file;
        }
    };

    $scope.generate = function (form, data) {
        services.http({
            url: window._API_PATH.generateQuote,
            method: "POST",
            data: data
        }).then(function (result) {
            return console.log(result);
        }).catch(function (err) {
            return console.log(err);
        });
    };
}]);
'use strict';

angular.module('intranet').controller('settingsController', ['$scope', '$mdDialog', 'services', '$rootScope', 'Upload', '$timeout', function ($scope, $mdDialog, services, $rootScope, Upload, $timeout) {

    // $scope.setting={title:"te"};

    $scope.getSettings = function () {
        services.http({
            url: window._API_PATH.getSettings,
            method: 'GET',
            params: { _id: $rootScope.isLogin._id }
        }).then(function (res) {
            if (res.output) {
                res.output.forEach(function (elem) {
                    $scope.setting[elem.meta_key] = elem.meta_value;
                });
            }
        }).catch(function (err) {
            return console.log("Asdasdasd");
        });
    };

    $scope.getSettings();

    $scope.updateSettings = function () {
        services.http({
            url: window._API_PATH.updateSettings,
            method: 'POST',
            data: $scope.setting
        }).then(function (res) {
            return console.log(res);
        }).catch(function (err) {
            return false;
        });
    };

    $scope.uploadFileToServer = function (file) {
        if (!file) {
            return $scope.updateSettings();
        }
        var File = { file: file };
        angular.merge(File, $scope.setting);
        Upload.upload({
            url: window._API_PATH.updateSettings,
            data: File
        }).then(function (resp) {
            console.log(resp);
        }, function (resp) {
            console.log(resp);
        }, function (evt) {
            var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
            $timeout(function () {}, 200);
        });
    };
}]);
'use strict';

angular.module('intranet').config(['$stateProvider', 'stateHelperProvider', function ($stateProvider, stateHelperProvider) {
	stateHelperProvider.state({
		name: 'myProfile',
		url: '/my-profile',
		templateUrl: 'components/app-my-profile/views/my-profile.html',
		controller: 'myProfileController',
		children: [{
			name: 'personalInfo',
			url: '/personal-information',
			templateUrl: 'components/app-my-profile/app-personal-info/views/personal-info.html',
			controller: 'personalInfoController'
		}, {
			name: 'changePassword',
			url: '/change-password',
			templateUrl: 'components/app-my-profile/app-change-password/views/change-password.html',
			controller: 'changePasswordController'
		}, {
			name: 'changePicture',
			url: '/change-picture',
			templateUrl: 'components/app-my-profile/app-change-picture/views/update-picture.html',
			controller: 'changePictureController'
		}]

	});
}]);
'use strict';

angular.module('intranet').config(['$stateProvider', 'stateHelperProvider', function ($stateProvider, stateHelperProvider) {
	// stateHelperProvider
	//       .state({
	// 	name: 'usersPermission',
	// 	templateUrl: 'components/app-users-permission/views/userPermission.html',
	// 	controller: 'usersPermissionController',
	// 	children:[
	// 	{
	// 		name: 'viewsUsers',
	// 		url: '^/users-list',
	// 		templateUrl: 'components/app-users-permission/app-view-users/views/user-list.html',
	// 		controller: 'usersListController',
	// 	},{
	// 		name: 'addUsers',
	// 		url: '^/add-new-users',
	// 		templateUrl: 'components/app-my-profile/app-change-password/views/change-password.html',
	// 		controller: 'addUsersController',
	// 	}
	// ]

	// });

	stateHelperProvider.state({
		url: '/user-list',
		name: 'viewsUsers',
		templateUrl: 'components/app-users-permission/app-view-users/views/user-list.html',
		controller: 'usersListCtrl'
	});

	stateHelperProvider.state({
		url: '/add-new-user',
		name: 'Adduser',
		templateUrl: 'components/app-users-permission/app-add-users/views/add-user.html',
		controller: 'addUsersController'
	});

	stateHelperProvider.state({
		url: '/update-user/:id',
		name: 'updateUser',
		params: { id: null },
		templateUrl: 'components/app-users-permission/app-add-users/views/add-user.html',
		controller: 'addUsersController'
	});
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {
	stateHelperProvider.state({
		name: 'customerCRM',
		url: '/customer-list',
		templateUrl: 'components/customerCRM/views/customerList.html',
		controller: 'customerCRMController'
	}).state({
		name: 'addCustomer',
		url: '/add-customer',
		templateUrl: 'components/customerCRM/views/addCustomer.html',
		controller: 'addCustomerController'
	}).state({
		name: 'editCustomer',
		url: '/update-customer/:id',
		templateUrl: 'components/customerCRM/views/addCustomer.html',
		controller: 'updateCustomerController'
	});
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {

	stateHelperProvider.state({
		name: 'documentUpload',
		url: '/file-managment',
		templateUrl: 'components/document-upload/views/document-upload.html',
		controller: 'documentUploadController'
	}).state({
		name: 'folderList',
		url: '/file-managment/:_id',
		templateUrl: 'components/document-upload/views/document-upload.html',
		controller: 'folderListController'
	});
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {
	stateHelperProvider.state({
		name: 'allLeads',
		url: '/leads',
		templateUrl: 'components/leads/views/list.html',
		controller: 'leadsController'
	}).state({
		name: 'addLead',
		url: '/leads/add',
		templateUrl: 'components/leads/views/add.html',
		controller: 'addLeadsController'
	}).state({
		name: 'editLead',
		url: '/leads/edit/:id',
		templateUrl: 'components/leads/views/add.html',
		controller: 'addLeadsController'
	});
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {
    stateHelperProvider.state({
        name: 'proposalCreator',
        url: '/proposal-creator',
        templateUrl: 'components/proposal-creator/views/proposal-creator.html',
        controller: 'proposalCreatorController'
    });
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {
    stateHelperProvider.state({
        name: 'quoteCreator',
        url: '/quote-creator',
        templateUrl: 'components/quote-creator/views/quote-creator.html',
        controller: 'quoteCreatorController'
    });
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {

	stateHelperProvider.state({
		name: 'webSettings',
		url: '/settings',
		templateUrl: 'components/web-configrations/views/settings.html',
		controller: 'settingsController'
	});
}]);
'use strict';

angular.module('intranet').controller('addUsersController', ['$scope', '$rootScope', '$state', 'services', '$timeout', function ($scope, $rootScope, $state, services, $timeout) {
	var request = {
		url: window._API_PATH.addEmployee,
		method: 'POST',
		data: { _id: $rootScope.isLogin._id }
	};

	$scope.state = $state.current.name;
	$scope.user = { permissions: [] };

	$scope.userPermissionList = ['Full Functional Email', 'Employee Invoicing automation', 'Customer CRM for employee use', 'Customer list view'];
	$scope.isEdit = false;
	//get user list 

	if ($state.current.name === 'updateUser') {
		$scope.isPageLoading = true;
		//update request params
		request.url = window._API_PATH.updateEmployee; //update URL
		request.method = "PUT";
		request.data.userId = $state.params.id;

		if (!$state.params.id) {
			return;
		}
		$scope.isEdit = true;
		services.http({
			method: 'GET',
			url: window._API_PATH.getEmployee,
			params: { userId: $state.params.id, _id: $rootScope.isLogin._id }
		}).then(function (res) {
			$scope.user = res.data;
			$timeout(function () {
				$scope.isPageLoading = false;
			}, 300);
		}).catch(function (err) {
			$timeout(function () {
				$scope.isPageLoading = false;
			}, 300);
			history.go(-1);
			services.notify(services.getError(err).message, 'error');
		});
	}

	$scope.submitForm = function (form) {
		if (form.$valid) {

			if ($scope.user.permissions.length === 0) {
				$scope.alert = { type: 'error', message: 'Please select at least one user permission' };
				return;
			}

			request.data.userData = $scope.user;

			$scope.isLoading = true;
			services.http(request).then(function (res) {
				$scope.isLoading = false;

				$scope.alert = { type: 'success', message: res.message + ' <a href="/user-list">view  list</a>' };
				console.log($scope.isEdit);

				if ($scope.isEdit == false) {
					$scope.user = { permissions: [] };
					form.$setPristine();
					form.$setUntouched();
				}
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};

	$scope.generatePassword = function () {
		$scope.user.password = randomPassword(8);
	};

	$scope.toggle = function (item, list) {
		var idx = list.indexOf(item);
		if (idx > -1) {
			list.splice(idx, 1);
		} else {
			list.push(item);
		}
	};

	$scope.exists = function (item, list) {
		if (list) {
			return list.indexOf(item) > -1;
		}
	};
}]);
'use strict';

angular.module('intranet').controller('usersListCtrl', ['$scope', '$rootScope', '$state', 'services', '$q', function ($scope, $rootScope, $state, services, $q) {

	$scope.actionType = 'select';
	$scope.paging = {};
	$scope.isFilter = false;
	$scope.selected = [];

	$scope.getList = function () {
		$scope.promise = $q(function (resolve, reject) {

			var params = $scope.paging ? $scope.paging : {};
			params._id = $rootScope.isLogin._id;
			return services.http({
				method: 'GET',
				url: window._API_PATH.listEmployee,
				params: params
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.users = res;
				$scope.paging = res.paging;
				resolve(res);
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
				services.notify(services.getError(err).message, 'error');
				reject(err);
			});
		});
	};

	$scope.getList();

	$scope.refresh = function () {
		$state.reload();
	};

	$scope.filterResult = function (search) {
		$scope.paging.q = search;
		$scope.getList();
	};

	$scope.closeFilter = function () {
		$scope.isFilter = !$scope.isFilter;
		if ($scope.isFilter == false) {
			$scope.getList();
		}
	};

	$scope.changeStatus = function () {
		if ($scope.actionType == "select") {

			services.notify('Please select action type', 'error');
		} else {
			var status = $scope.actionType == 'activate' ? true : false;
			$scope.isProcessing = true;
			services.http({
				method: 'PUT',
				url: _API_PATH.updateAllEmployees,
				data: { users: $scope.selected, status: status }
			}).then(function (res) {
				services.notify(res.message);
				$scope.getList();
				$scope.isProcessing = false;
				$state.reload();
			}).catch(function (err) {
				//define error
				$scope.alert = services.getError(err);
				services.notify(services.getError(err).message, 'error');
				$scope.isProcessing = false;
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('loginController', ['$scope', '$rootScope', 'services', '$state', function ($scope, $rootScope, services, $state) {

	$scope.user = services.getSession().session || {};

	var tempLogin = function tempLogin() {
		var user = {
			email: "mahendra.life@hotmaul.com",
			name: "mahendra"
		};
		$rootScope.isLogin = services.setSession(user).user;
		$rootScope.isCookies = services.setSession(user).session;
		$state.go('dashbaord');
	};

	$scope.submitForm = function (form, user) {

		//tempLogin();
		if (form.$valid) {
			$scope.alert = { type: 'success', message: 'Processing..' };
			$scope.isLoading = true;

			services.http({
				method: 'POST',
				url: window._API_PATH.login,
				data: user
			}).then(function (res) {
				$scope.isLoading = false;

				res.data.remember = user.remember;
				$rootScope.isLogin = services.setSession(res.data).user;
				$rootScope.isCookies = services.setSession(res.data).session;

				$state.go('dashbaord');
				$scope.alert = { type: 'success', message: res.message };
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};

	$scope.loginDifferent = function () {
		return delete $rootScope.isCookies;
	};
	$scope.removeSession = function () {
		return $rootScope.isCookies = services.removeCookies();
	};
}]);
'use strict';

angular.module('intranet').controller('resetPasswordController', ['$scope', '$rootScope', 'services', '$state', function ($scope, $rootScope, services, $state) {

	$scope.submitForm = function (form, user) {

		if (form.$valid) {

			$scope.alert = { type: 'success', message: 'Processing..' };
			$scope.isLoading = true;

			services.http({
				method: 'POST',
				url: window._API_PATH.resetPassword,
				data: user
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.alert = { type: 'success', message: res.message };
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('changePasswordController', ['$scope', '$rootScope', '$state', 'services', function ($scope, $rootScope, $state, services) {
	$scope.user = {};

	$scope.submitForm = function (form, user) {

		if (form.$valid) {
			//submit form 
			$scope.alert = { type: 'success', message: 'Checking..' };
			$scope.isLoading = true;
			services.http({
				method: 'POST',
				url: window._API_PATH.changePassword,
				data: user
			}).then(function (res) {
				$scope.isLoading = false;
				$scope.alert = { type: 'success', message: res.message };
				$scope.user = {};
				form.$setPristine();form.$setUntouched();
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet').controller('changePictureController', ['$scope', '$rootScope', '$state', 'Upload', 'services', '$timeout', function ($scope, $rootScope, $state, Upload, services, $timeout) {

	if ($rootScope.isLogin && $rootScope.isLogin.image) {
		// $scope.myImage=$rootScope.isLogin.image ;

	} else {
			// $scope.myImage= 'assets/images/no-picture.png';
		}

	$scope.myCroppedImage = '';

	$scope.onSelectImage = function (file) {

		if (file) {
			if (!window.checkImage(file.type)) {
				$scope.isError = true;
				return false;
			} else {
				$scope.isError = false;
			}
			$scope.isUploading = true;
			$scope.isLoading = true;
			$scope.isChangeImage = true;
			$scope.imageName = file.name;
			var reader = new FileReader();
			reader.onload = function (file) {

				$scope.$apply(function ($scope) {
					$scope.myImage = file.target.result;
					$timeout(function () {
						$scope.isUploading = false;
					}, 500);
				});
			};
			reader.readAsDataURL(file);
		}
	};

	$scope.cancelCrop = function () {
		$scope.myImage = '';
		$scope.myCroppedImage = '';
		$scope.isError = false;
	};

	$scope.UploadForm = function (form) {

		if (form.$valid) {
			$scope.isUploading = true;
			//submit form 
			Upload.upload({
				url: window._API_PATH.updateProfileImage,
				data: {
					file: Upload.dataUrltoBlob($scope.myCroppedImage, $scope.imageName),
					_id: $rootScope.isLogin._id
				}
			}).then(function (response) {
				//if image is sucessfully uploaded
				$rootScope.isLogin.image = response.data.data.image;
				console.log($rootScope.isLogin.image);
				//update session
				$rootScope.updateUserSession();
				$scope.isUploading = false;
				$scope.cancelCrop();
			}, function (err) {
				$scope.alert = services.getError(err);
				$scope.isUploading = false;
			}, function (evt) {

				$scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
			});
		}
	};
}]);

window.checkImage = function (type) {
	console.log(type);

	if (type.indexOf('image') >= 0) {
		return true;
	} else {
		return false;
	}
};
'use strict';

angular.module('intranet').controller('personalInfoController', ['$scope', '$rootScope', '$state', 'services', function ($scope, $rootScope, $state, services) {

	//get profile data 
	$scope.user = { _id: $rootScope.isLogin._id };

	var getProfile = function getProfile() {

		services.http({
			method: 'GET',
			url: window._API_PATH.getProfile,
			params: { _id: $rootScope.isLogin._id }
		}).then(function (res) {

			$scope.isLoading = false;
			$scope.user = res.data;
		}).catch(function (err) {
			console.log(err);
			//define error
			$scope.isLoading = false;
			$scope.alert = services.getError(err);
		});
	};

	getProfile();

	$scope.submitForm = function (form, user) {

		if (form.$valid) {
			//submit form 
			services.http({
				method: 'PUT',
				url: window._API_PATH.updateProfile,
				data: $scope.user
			}).then(function (res) {
				$scope.alert = { type: 'success', message: res.message };
			}).catch(function (err) {
				//define error
				$scope.isLoading = false;
				$scope.alert = services.getError(err);
			});
		}
	};
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('addNewFolder', ['$timeout', '$rootScope', '$mdDialog', 'services', function ($timeout, $rootScope, $mdDialog, services) {
	return {
		scope: { folders: '=', path: '=' },
		link: function link(scope, ele) {

			ele.on('click', function (e) {
				scope.addFolder(e);
			});

			scope.$watch('folderActive', function (folders) {
				if (folders) {
					scope.folders = folders;
				}
			});

			scope.addFolder = function (ev) {

				$mdDialog.show({
					controller: "addNewFolderController",
					templateUrl: 'components/document-upload/views/add-new-folder.html',
					targetEvent: ev,
					clickOutsideToClose: true,
					fullscreen: true, // Only for -xs, -sm breakpoints.
					locals: { data: { folders: scope.folders, path: scope.path } }
				}).then(function (folder) {}, function (folder) {

					if (folder) {
						$timeout(function () {
							$rootScope.$broadcast('updateList');
							services.notify(folder.message);
						}, 300);
					}
				});
			};
		}
	};
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('deleteData', ['$timeout', '$rootScope', '$state', '$mdDialog', 'services', function ($timeout, $rootScope, $state, $mdDialog, services) {
	return {
		scope: { deleteData: '=' },
		link: function link(scope, ele) {

			ele.on('click', function () {

				$mdDialog.show({
					controller: "deleteDataController",
					templateUrl: 'components/document-upload/views/delete-data.html',
					clickOutsideToClose: false,
					locals: { data: scope.deleteData }
				}).then(function (folder) {}, function (folder) {

					if (folder) {
						$timeout(function () {
							services.saveLocal('activeFolder', folder);
							console.log("added 2 time");
							$rootScope.$broadcast('updateList');
							services.notify(folder.message);
						}, 300);
					}
				});
			});
		}
	};
}]).controller('deleteDataController', ['$scope', '$mdDialog', 'services', '$rootScope', 'data', '$state', function ($scope, $mdDialog, services, $rootScope, data, $state) {

	$scope.data = data;

	console.log($scope.data);

	$scope.cancel = function () {
		$mdDialog.cancel();
	};

	$scope.delete = function () {

		$scope.isLoading = true;
		var request = {
			_id: $rootScope.isLogin._id,
			path: $scope.data.path

		};

		services.http({ url: window._API_PATH.remove_dir, method: 'PUT', data: request }).then(function (res) {
			$scope.isLoading = false;
			$mdDialog.cancel(res);
		}).catch(function (err) {
			//define error
			$scope.isLoading = false;
			$scope.alert = services.getError(err);
		});
	};
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('mdFolder', ['$timeout', '$rootScope', function ($timeout, $rootScope) {
	return {
		templateUrl: 'components/document-upload/views/folder-list.html'
	};
}]).directive('iconType', ['$timeout', '$rootScope', function ($timeout, $rootScope) {
	return {
		template: '\n\t\t\t\t<img ng-src="{{isFile}}" fallback-Src=\'assets/fileIcons/file.svg\' ng-if="isFile"  class="folder-icon md-whiteframe-2dp">\n\t\t\t\t<md-icon ng-if="!isFile" class="folder-icon md-whiteframe-2dp">folder</md-icon>\n\t\t\t',
		link: function link(scope, ele) {
			scope.setIcon = function () {
				// fileIcons
				var mineType = scope.folder.mimeType;

				if (mineType && mineType.indexOf('image') >= 0) {
					scope.isFile = scope.folder.attachment.secure_url;
				} else {
					var filesExt = scope.folder.attachment.secure_url.split('.').clean();
					var fileType = filesExt[filesExt.length - 1];
					scope.isFile = 'assets/fileIcons/' + fileType + '.svg';
				}
			};

			if (scope.folder && scope.folder.attachment) {
				scope.setIcon();
			} else {
				scope.isFile = null;
			}
		}
	};
}]);

Array.prototype.clean = function (deleteValue) {
	for (var i = 0; i < this.length; i++) {
		if (this[i] == deleteValue) {
			this.splice(i, 1);
			i--;
		}
	}
	return this;
};
'use strict';

angular.module('intranet')
//scroll to top 
.directive('folderSize', ['$timeout', '$rootScope', '$mdDialog', 'services', function ($timeout, $rootScope, $mdDialog, services) {

	return {
		template: '{{size}}',
		scope: { folderSize: '=' },
		link: function link(scope, ele) {

			scope.$watch('folderSize', function (size) {
				if (size) {
					scope.size = bytesToSize(size);
				}
			});
		}

	};
}]);

function bytesToSize(bytes) {
	var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
	if (bytes == 0) return '0 Byte';
	var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
	return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}
'use strict';

angular.module('intranet')
//scroll to top 
.directive('mdBreadcrumb', ['$timeout', '$rootScope', '$state', function ($timeout, $rootScope, $state) {
	return {
		templateUrl: 'components/document-upload/views/md-breadcrumb.html',
		scope: { data: '=' },
		link: function link(scope, ele) {

			scope.state = $rootScope.state;
			scope.$watch('data', function (breadcrumb) {
				if (breadcrumb && breadcrumb.breadcrumb) {
					scope.breadcrumb = breadcrumb.breadcrumb;
					scope.breadcrumb.push({ _id: breadcrumb._id, title: breadcrumb.title });
				}
			});

			scope.goTo = function (link) {
				$state.go('folderList', { _id: link._id });
			};
		}
	};
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('renameFolder', ['$timeout', '$rootScope', '$mdDialog', 'services', function ($timeout, $rootScope, $mdDialog, services) {
	return {
		scope: { folderActive: '=' },
		link: function link(scope, ele) {

			ele.on('click', function (e) {
				scope.renameFolder(e);
			});

			scope.$watch('folderActive', function (folderActive) {

				if (folderActive) {
					scope.folderActive = folderActive;
				}
			});

			scope.renameFolder = function (ev) {
				if (!scope.folderActive) {
					services.notify('Please select folder', 'error');return;
				}

				$mdDialog.show({
					controller: "renameFolderController",
					templateUrl: 'components/document-upload/views/rename-folder.html',
					targetEvent: ev,
					clickOutsideToClose: true,
					fullscreen: true, // Only for -xs, -sm breakpoints.
					locals: { data: { folderActive: scope.folderActive } }
				}).then(function (answer) {}, function (folder) {
					if (folder) {
						services.saveLocal('activeFolder', folder);
						$rootScope.$broadcast('updateList');
						services.notify(folder.message);
					}
				});
			};
		}
	};
}]);
'use strict';

angular.module('intranet')
//scroll to top 
.directive('uploadFileCustom', ['$timeout', '$rootScope', '$mdDialog', 'services', function ($timeout, $rootScope, $mdDialog, services) {
	return {
		template: '\n\t\t <md-button class="md-button-text" \n\t\t \tngf-select="uploadFiles($files)" \n\t\t \tngf-drop="uploadFiles($files)" \n\t\t \tmultiple="multiple" > \n            <md-icon>file_upload</md-icon>\n            <span > Upload </span>\n          </md-button>\n\t\t',

		link: function link(scope, ele) {

			scope.files = [];
			scope.uploadFiles = function (files) {
				if (files && files.length >= 0) {
					angular.forEach(files, function (file, key) {
						scope.files.push(file);
					});
					scope.openDiaglog();
				}
			};

			scope.openDiaglog = function () {

				$mdDialog.show({
					controller: "fileUploadDiaglogController",
					templateUrl: 'components/document-upload/views/file-upload-diaglog.html',
					clickOutsideToClose: false,
					hasBackdrop: false,
					fullscreen: false, // Only for -xs, -sm breakpoints.
					scope: scope.$new(), //pass parent scope to contoller 
					onShowing: function onShowing(scope, ele) {

						ele.addClass('file-on-upload');
						$timeout(function () {
							var mask = document.getElementsByClassName('md-scroll-mask');
							mask[0].remove();
							$('body').removeClass('md-dialog-is-showing');
						});
					}
				}).then(function (folder) {
					$rootScope.$broadcast('updateList');
				}, function (folder) {
					$rootScope.$broadcast('updateList');
				});
			};
			// scope.openDiaglog();
		}
	};
}]);
'use strict';

angular.module('intranet').directive('appFooter', [function () {
	return {
		templateUrl: 'components/shared-components/app-footer/views/footer.html'
	};
}]);
'use strict';

angular.module('intranet').directive('appHeader', [function () {
	return {
		templateUrl: 'components/shared-components/app-header/views/header.html'
	};
}]);
'use strict';
//notification alert toast

angular.module('intranet').controller('notifyCtrl', ['$scope', '$mdToast', 'message', '$state', '$rootScope', function ($scope, $mdToast, message, $state, $rootScope) {
	$scope.message = message;
	$scope.close = function () {
		$mdToast.hide();
	};

	$scope.redirect = function () {
		if (!message.data) return;
		if ($scope.message.data.type === "posted") {
			$mdToast.hide();
		}
	};
}]);
'use strict';

angular.module('intranet').directive('appSidebar', [function () {
	return {
		templateUrl: 'components/shared-components/app-sidebar/views/sidebar.html'
	};
}]);
'use strict';

angular.module('intranet').config(['stateHelperProvider', function (stateHelperProvider) {
	stateHelperProvider.state({
		name: 'login',
		url: '/login',
		templateUrl: 'components/app-before-login/app-login/views/login.html',
		controller: 'loginController'
		// resolve: {checkLogin :['loginValidate', (loginValidate) => {
		// 	return loginValidate.checkStatus();
		// }]}
	});
}]);
'use strict';

angular.module('intranet').config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
	$stateProvider.state({
		name: 'resetPassword',
		url: '/reset-password',
		templateUrl: 'components/app-before-login/app-reset-password/views/reset-password.html',
		controller: 'resetPasswordController'
	});
}]);